import sys
sys.path.append("C:/Users/waelk/MEGA/GitHub/TDP - Project 1")
from circularPositionalList import CircularPositionList





"""
dsal = CircularPositionList()
dsaf = CircularPositionList()
list1 = CircularPositionList()
list2 = CircularPositionList()

print('INIZIO DEL TEST')
print("'add_first' TESTING")
dsaf.add_first(4)
dsaf.add_first(5)
dsaf.add_first(5)
dsaf.add_first(8)
dsaf.add_first(7)
dsaf.printList()   #Il parametro passato alla funzione indica il numero di volte che si vuole scorrere la lista in modo circolare

print("espected:'7 8 5 5 4' test: passed")
print('>--------------------------------------------<')
print("'first' TESTING on:")
dsaf.printList()
print("espected:'7' ->>",dsaf.first().element())
print('>--------------------------------------------<')
print("'last' TESTING on:")
dsaf.printList()
print("espected:'4' ->>",dsaf.last().element())
print('>--------------------------------------------<')
print("'before'-first TESTING on:")
dsaf.printList()
print("espected:'4' ->>",dsaf.before(dsaf.first()).element())
print('>--------------------------------------------<')
print("'after'-first TESTING on:")
dsaf.printList()
print("espected:'8' ->>",dsaf.after(dsaf.first()).element())
print('>--------------------------------------------<')
print("'is_empty' TESTING on:")
dsaf.printList()
print("espected:'False' ->>",dsaf.is_empty())   
print('>--------------------------------------------<')
print("'add_last' TESTING")
dsal.add_last(4)
dsal.add_last(5)
dsal.add_last(8)
dsal.add_last(7)
dsal.printList()
print("aspected:'4 5 8 7' test: passed")
print('>--------------------------------------------<')
print("'add_after and add_before' TESTING 1/2")
dsal.add_after(dsal.last(),99)
dsal.add_before(dsal.last(),99)
dsal.printList()
print("aspected:'99 4 5 8 99 7' test: passed")
print('>--------------------------------------------<')
print("'add_after and add_before' TESTING 2/2")
dsal.add_after(dsal.first(),100)
dsal.add_before(dsal.first(),100)
dsal.printList()
print("espected:'99 100 4 5 8 99 7 100' test: passed")
print('>--------------------------------------------<')
print("'clear' TESTING")
dsal.clear()
dsal.printList()
print("espected:'' test: passed")
print('>--------------------------------------------<')
print("'find' TESTING")
temp = dsaf.find(5)
print('Element returned:',temp.element())
print("espected:'5' test: passed")
print('>--------------------------------------------<')
print("'count' TESTING")
dsaf.printList()
temp = dsaf.count(5)
print('Element returned:',temp)
print("espected:'2' test: passed")
print('>--------------------------------------------<')
print("'delete' TESTING")
print('Before..')
dsaf.printList()
dsaf.delete(dsaf.find(4))
print('Element deleted: 4')
print('After..')
dsaf.printList()
print("espected:'7 8 5 5' test: passed")
print('>--------------------------------------------<')
print("'reverse' TESTING")
print('Before..')
dsaf.printList()
dsaf.reverse()
print('After..')
dsaf.printList()
print("espected:'5 5 8 7' test: passed")
print('>--------------------------------------------<')
print("'copy' TESTING")
print('ORIGINAL..')
dsaf.printList()
dsafc = dsaf.copy()
print('COPY..')
dsafc.printList()
print("test: passed")
print('>--------------------------------------------<')
print("'replace'-first with 512 TESTING")
print('Before..')
dsaf.printList()
dsaf.replace(dsaf.first(),512)
print('After..')
dsaf.printList()
print("espected:'512 5 8 7' test: passed")
print('>--------------------------------------------<')
print("'is_sorted' TESTING")
dsafc.printList()
print('Replace 8 with 6..')
dsafc.replace(dsafc.find(8),6)
dsafc.printList()
print("espected'True' is_sorted =",dsafc.Is_sorted(),'- test: passed')
dsafc.add_last(2)
dsafc.printList()
print("espected'False' is_sorted =",dsafc.Is_sorted(),'- test: passed')
print('>--------------------------------------------<')
print("'merge' TESTING")
def merge(list1,list2):      #controllo che siano due liste
    l1c = list1.copy()
    iter2 = iter(list2)
    temp = l1c.first()
    while True:
        try:
            val = next(iter2)
        except StopIteration:
            break
        while val >= temp.element():
            temp = l1c.after(temp)
            if temp == l1c.first():
                break
        l1c.add_before(temp,val)
    return l1c

list1.add_last(1)
list1.add_last(5)
list1.add_last(9)
list2.add_last(2)
list2.add_last(6)
list2.add_last(8)
list2.add_last(11)
list2.add_last(20)
list2.add_last(34)
list2.add_last(41)
res = merge(list1,list2)
res.printList()
print("espected:'1,2,5,6,8,9,11,20,34,41' test: passed")
print('>------------------------------------------------------------------------------------------<')
print("'bubblesorted' TESTING")
prova=CircularPositionList()
prova.add_first(8)
prova.add_first(15)
prova.add_first(13)
prova.add_first(10)
prova.add_first(3)
prova.add_first(7)
prova.add_first(9)
prova.add_first(1)
prova.add_first(19)
print('Original')
prova.printList()
print('Bubblesorted return')
iter_b = prova.bubblesorted()
i=0
for e in iter_b:
    print("Elemento",i,":",e)
    i+=1
print("espected:'19,1,9,7,3,10,13,15,8' test: passed")
print('>------------------------------------------------------------------------------------------<')
"""


input('Press ENTER to continue..')
